package phase1.server.dao;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.beans.SamePropertyValuesAs.samePropertyValuesAs;
import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.postgresql.util.PSQLException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import phase1.server.bean.FlightPlanBean;
import util.Prop;
import util.TestDao;
import util.TestMock;

public class SelectDaoTest {

	/****************** 準備エリア↓ **************************/
	/**
	 * データベースへの接続設定を行う
	 */
	public static ApplicationContext context;

	ResultSet rs = null;
	static Statement stmt = null;
	static Connection conn = null;

	/**
	 * 設定ファイルを用いずにDB接続を行うための準備
	 * 
	 * @throws Exception
	 */
	@BeforeClass
	public static void beforeClass() throws Exception {

		// Oracle JDBC Driverのロード
		Class.forName("org.postgresql.Driver");
		// Oracle8iに接続
		conn = DriverManager
				.getConnection("jdbc:postgresql://localhost:5432/phase_one?user=postgres&password=postgres");
		// ステートメントを作成
		stmt = conn.createStatement();
	}

	/**
	 * 後処理　コネクションの類を閉じる
	 */
	@AfterClass
	public static void afterClass() {
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			System.out.println("クローズ処理で何らかのエラー");
		}

	}

	/**
	 * 各テストの前に毎度実行される テーブルがあってもなくてもテーブルを作成し（すでに存在する場合はエラーキャッチ）
	 * applicationCOntextをnewして（テストクラス共通で使用する） すべてのレコードを削除し レコードを二件挿入する
	 */
	@Before
	public void before() {
		// テーブルがない場合、テーブルを作成する
		try {
			stmt.executeUpdate("CREATE TABLE flight_plan (    dbc smallint NOT NULL,    departure character varying NOT NULL,    dept_longitude numeric(10,6) NOT NULL,dept_latitude numeric(10,6) NOT NULL,    dept_time time without time zone NOT NULL,    arrival character varying NOT NULL,    arriv_longitude numeric(10,6) NOT NULL,    arriv_latitude numeric(10,6) NOT NULL,    arriv_time time without time zone NOT NULL,one_longitude numeric(10,6) NOT NULL,    one_latitude numeric(10,6) NOT NULL,    one_time time without time zone NOT NULL,    two_longitude numeric(10,6) NOT NULL,    two_latitude numeric(10,6) NOT NULL,    two_time time without time zone NOT NULL,three_longitude numeric(10,6) NOT NULL,    three_latitude numeric(10,6) NOT NULL,    three_time time without time zone NOT NULL,    four_longitude numeric(10,6) NOT NULL,    four_latitude numeric(10,6) NOT NULL,    four_time time without time zone NOT NULL);");
		} catch (SQLException e) {
			// e.printStackTrace();
			System.out.println("すでにテーブルが存在する");
		}
		// すべてのレコードを削除する
		System.out.println("@test");
		context = new ClassPathXmlApplicationContext(
				"/META-INF/spring/integration/applicationContext_for_Test.xml");
		TestDao dao = context.getBean("testDao", TestDao.class);
		dao.deleteAll();
		// 期待値をinsertする

		TestMock moc = new TestMock();

		FlightPlanBean bean = moc.mockSet();
		FlightPlanBean bean2 = moc.mockSet2();
		dao.insertOne(bean);
		dao.insertOne(bean2);
	}

	/**
	 * flight_planテーブルがあってもなくても削除する DB接続失敗テスト用の前処理
	 */
	public void dropTbl() {
		try {
			stmt.executeUpdate("drop table flight_plan ;");
		} catch (PSQLException e) {
			System.out.println("drop　error");
			// e.printStackTrace();
		} catch (SQLException e) {
			System.out.println("drop　error");
		}
	}

	/**
	 * フライトプランテーブルからデータをすべて削除する 一件もデータが存在しない場合のテスト用前処理
	 */
	public void deleteAll() {

		// すべてのレコードを削除する
		context = new ClassPathXmlApplicationContext(
				"/META-INF/spring/integration/applicationContext_for_Test.xml");
		TestDao dao = context.getBean("testDao", TestDao.class);
		dao.deleteAll();

	}

	/****************** 準備エリア↑　ここまで **************************/
	/**
	 * 全件検索　DB接続失敗
	 */
	@Test
	public void SelecAll_DBNG_002_001() {

		// 前準備として、テーブルを削除する
		dropTbl();
		// 本番実行
		SelectDao sd = new SelectDao();
		ArrayList<FlightPlanBean> actualList = (ArrayList<FlightPlanBean>) sd
				.selectAll();
		FlightPlanBean actualBean =  actualList.get(Prop.FIRST_OBJECT);
		// 値突合せ
		// リストの最初のオブジェクトのDBC値がエラーコードになっていること
		assertThat(actualBean.getDbc(), is(Prop.ERRORCODE));
	}

	/**
	 * 全件検索　複数検索成功
	 */
	@Test
	public void SelectAll_get_objects_002_002() {

		// 期待値を詰める

		ArrayList<FlightPlanBean> exepectedList = new ArrayList<FlightPlanBean>(); // 期待値を格納するBeanを格納するリスト
		FlightPlanBean exepectedBean = context.getBean("bean",
				FlightPlanBean.class); // 期待値を格納するBean
		FlightPlanBean exepectedBean2 = context.getBean("bean",
				FlightPlanBean.class); // 期待値を格納するBean2
		// ドライバを使用して期待値をオブジェクトにつめる
		TestMock moc = new TestMock();
		exepectedBean = moc.mockSet();
		exepectedList.add(exepectedBean);
		exepectedBean2 = moc.mockSet2();
		// 期待値オブジェクトをリストに詰める
		exepectedList.add(exepectedBean2);

		// 実行値の取得
		// 本番実行
		SelectDao sd = context.getBean("selectDao", SelectDao.class);
		ArrayList<FlightPlanBean> actualList = (ArrayList<FlightPlanBean>) sd.selectAll();

		// フライトプランの中身照合
		for (int index = 0; index < actualList.size(); index++) {
			FlightPlanBean actualBean = context.getBean("bean",FlightPlanBean.class);
			actualBean = actualList.get(index);
			FlightPlanBean exepectedBean3 = context.getBean("bean",
					FlightPlanBean.class); // 期待値を格納するBean
			exepectedBean3 = exepectedList.get(index);
			// このメソッドでオブジェクトの中身丸ごとを比較できる
			assertThat(actualBean, is(samePropertyValuesAs(exepectedBean3)));
		}
	}

	/**
	 * 全件検索　検索結果ﾅｼ
	 */
	@Test
	public void SelectAll_no_result_002_003() {

		// 前準備としてすべてのレコードを削除する
		deleteAll();
		
		// 本番実行
		SelectDao sd = context.getBean("selectDao", SelectDao.class);
		ArrayList<FlightPlanBean> actualList = (ArrayList<FlightPlanBean>) sd
				.selectAll();
		//戻り値のリストがnullが評価
		assertThat(actualList, is(nullValue()));// 
	}
	/**
	 * 一件検索　DB接続失敗
	 */
	@Test
	public void SelecOne_DBNG_002_004() {

		// 前準備として、テーブルを削除する
		dropTbl();
		// 本番実行
		SelectDao sd = new SelectDao();
		FlightPlanBean actualBean= sd.selectOne(Prop.DBC1);
		// 値突合せ
		// リストの最初のオブジェクトのDBC値がエラーコードになっていること
		assertThat(actualBean.getDbc(), is(Prop.ERRORCODE));
	}
	
	/**
	 * 1件検索　複数検索成功
	 */
	@Test
	public void SelectOne_get_objects_002_005() {

		// 期待値を詰める
		FlightPlanBean exepectedBean = context.getBean("bean",
				FlightPlanBean.class); // 期待値を格納するBean
		// 期待値をオブジェクトにつめる
		TestMock moc = new TestMock();
		exepectedBean = moc.mockSet();

		// 実行値の取得
		// 本番実行
		SelectDao sd = context.getBean("selectDao", SelectDao.class);
		FlightPlanBean actualBean= sd.selectOne(Prop.DBC1);

		// フライトプランの中身照合
		assertThat(actualBean, is(samePropertyValuesAs(exepectedBean)));
	}
	/**
	 * 1件検索　検索結果ﾅｼ
	 */
	@Test
	public void SelectOne_no_result_002_006() {

		// 前準備としてすべてのレコードを削除する
		deleteAll();
		
		// 本番実行
		SelectDao sd = context.getBean("selectDao", SelectDao.class);
		FlightPlanBean actualBean =sd
				.selectOne(Prop.DBC1);
		//戻り値のリストがnullが評価
		assertThat(actualBean, is(nullValue()));// 
	}
}
